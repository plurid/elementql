const fs = require('fs').promises;
const path = require('path');
const yaml = require('js-yaml');



const readConfigurationData = async () => {
    const configurationFilePaths = [
        './configurations/elementql.yaml',
        './src/elementql.yaml',
        '/source/elementql.yaml',
        './elementql.yaml',
    ];

    for (const configurationFilePath of configurationFilePaths) {
        const configurationFileLocation = path.join(
            process.cwd(),
            configurationFilePath,
        );

        if (fs.existsSync(configurationFileLocation)) {
            const configurationFile = await fs.readFile(configurationFileLocation);
            const configuration = yaml.safeLoad(configurationFile, 'utf8');
            return configuration;
        }
    }

    return;
}


const metabootloader = async () => {
    try {
        const configuration = await readConfigurationData();

        if (!configuration) {
            console.log('\n\tMetabootloader could not locate the \'elementql.yaml\' file.\n');
            return;
        }

        const {
            globals,
            origins,
        } = configuration;

        const bootloaderConfiguration = {
            globals,
            origins,
        };

        const bootloaderContents =
`// ---
// File generated by ElementQL's metabootloader. Do not edit directly.
// ---

const {
    bootloader,
} = require('@plurid/elementql');

const configuration = ${JSON.stringify(bootloaderConfiguration, null, 4)};

bootloader(configuration);
`;

        const bootloaderPath = configuration.bootloader;
        await fs.writeFile(
            bootloaderPath,
            bootloaderContents,
        );

        console.log(`\n\tMetabootloader generated the bootloader '${bootloaderPath}'.\n`);
    } catch (error) {
        console.log('\n\tMetabootloader failed to generate the bootloader.\n');
    }
}


metabootloader();




// const fs = require('fs');
// const yaml = require('js-yaml');


// const configurationFilePath = './configurations/elementql.yaml';
// const configurationFile = fs.readFileSync(configurationFilePath);
// const configuration = yaml.safeLoad(configurationFile, 'utf8');


// const bootloaderContents =
// `// ---
// // File generated by ElementQL's metabootloader. Do not edit directly.
// // ---

// const {
//     bootloader,
// } = require('@plurid/elementql');

// const configuration = ${JSON.stringify(configuration)};

// bootloader(configuration);
// `;


// const bootloaderPath = './source/index.js';
// fs.writeFileSync(bootloaderPath, bootloaderContents);

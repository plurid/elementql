const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml');

const fsPromise = fs.promises;



const readConfigurationData = async () => {
    const configurationFilePaths = [
        './configurations/elementql.yaml',
        './src/elementql.yaml',
        '/source/elementql.yaml',
        './elementql.yaml',
    ];

    for (const configurationFilePath of configurationFilePaths) {
        const configurationFileLocation = path.join(
            process.cwd(),
            configurationFilePath,
        );

        if (fs.existsSync(configurationFileLocation)) {
            const configurationFile = await fsPromise.readFile(configurationFileLocation);
            const configuration = yaml.safeLoad(configurationFile, 'utf8');
            return configuration;
        }
    }

    return;
}


const metabootloader = async () => {
    try {
        const configuration = await readConfigurationData();

        if (!configuration) {
            console.log('\n\tMetabootloader could not locate the \'elementql.yaml\' file.\n');
            return;
        }

        const {
            globals,
            origins,
        } = configuration;

        const bootloaderConfiguration = {
            globals,
            origins,
        };

        const bootloaderContents =
`// ---
// File generated by ElementQL's metabootloader. Do not edit directly.
// ---

const bootloader = async (
    configuration,
) => {
    try {
        const {
            globals,
            origins,
            entry,
        } = configuration;

        const serviceWorkerConfiguration = {
            globals,
            origins,
        };

        await navigator.serviceWorker.register('service-worker.js?' + JSON.stringify(serviceWorkerConfiguration));
        await navigator.serviceWorker.ready;

        const launch = async () => {
            await import(entry);
        };

        // this launches the app if the SW has been installed before or immediately after registration
        // https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#clientsclaim
        if (navigator.serviceWorker.controller) {
            await launch();
        } else {
            navigator.serviceWorker.addEventListener('controllerchange', launch);
        }
    } catch (error) {
        console.error('Service worker registration failed', error.stack);
    }
}

const configuration = ${JSON.stringify(bootloaderConfiguration, null, 4)};

bootloader(configuration);
`;

        const bootloaderPath = configuration.bootloader;
        await fsPromise.writeFile(
            bootloaderPath,
            bootloaderContents,
        );

        console.log(`\n\tMetabootloader generated the bootloader '${bootloaderPath}'.\n`);
    } catch (error) {
        console.log('\n\tMetabootloader failed to generate the bootloader.\n');
    }
}


exports.default = metabootloader;

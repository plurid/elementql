const fs = require('fs');
const yaml = require('js-yaml');



const readConfigurationData = async () => {
    const configurationFilePaths = [
        './configurations/elementql.yaml',
        './src/elementql.yaml',
        '/source/elementql.yaml',
        './elementql.yaml',
    ];

    for (const configurationFilePath of configurationFilePaths) {
        if (fs.existsSync(configurationFilePath)) {
            const configurationFile = fs.readFileSync(configurationFilePath);
            const configuration = yaml.safeLoad(configurationFile, 'utf8');
            return configuration;
        }
    }

    return;
}


const metabootloader = async () => {
    try {
        // const configurationFilePath = './configurations/elementql.yaml';
        // const configurationFile = fs.readFileSync(configurationFilePath);
        // const configuration = yaml.safeLoad(configurationFile, 'utf8');
        const configuration = await readConfigurationData();

        if (!configuration) {
            console.log('\n\tMetabootloader could not locate the \'elementql.yaml\' file.');
            return;
        }

        const {
            globals,
            origins,
        } = configuration;

        const bootloaderConfiguration = {
            globals,
            origins,
        };

        const bootloaderContents =
`// ---
// File generated by ElementQL's metabootloader. Do not edit directly.
// ---

const {
    bootloader,
} = require('@plurid/elementql');

const configuration = ${JSON.stringify(bootloaderConfiguration)};

bootloader(configuration);
`;

        const bootloaderPath = configuration.bootloaderPath;
        // const bootloaderPath = './source/index.js';
        fs.writeFileSync(
            bootloaderPath,
            bootloaderContents,
        );
    } catch (error) {
        console.log('\n\tMetabootloader failed to generate the bootloader.');
    }
}


metabootloader();
